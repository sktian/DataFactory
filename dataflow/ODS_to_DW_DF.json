{
	"name": "ODS_to_DW_DF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "WWIODS",
						"type": "DatasetReference"
					},
					"name": "Orders",
					"description": "OrderLines Dataset"
				},
				{
					"dataset": {
						"referenceName": "WWIODS",
						"type": "DatasetReference"
					},
					"name": "OrderLines"
				},
				{
					"dataset": {
						"referenceName": "WWIODS",
						"type": "DatasetReference"
					},
					"name": "Customers"
				},
				{
					"dataset": {
						"referenceName": "WWIODS",
						"type": "DatasetReference"
					},
					"name": "Invoices"
				},
				{
					"dataset": {
						"referenceName": "WWIODS",
						"type": "DatasetReference"
					},
					"name": "People"
				},
				{
					"dataset": {
						"referenceName": "WWIODS",
						"type": "DatasetReference"
					},
					"name": "PackageTypes"
				},
				{
					"dataset": {
						"referenceName": "WWIODS",
						"type": "DatasetReference"
					},
					"name": "StockItems"
				},
				{
					"dataset": {
						"referenceName": "WWIDW",
						"type": "DatasetReference"
					},
					"name": "LoadDestinationTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "WWIDW",
						"type": "DatasetReference"
					},
					"name": "ToDW"
				},
				{
					"dataset": {
						"referenceName": "WWIDW",
						"type": "DatasetReference"
					},
					"name": "UpdateisActive"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "join5"
				},
				{
					"name": "join6"
				},
				{
					"name": "SelectColumns"
				},
				{
					"name": "AddingIsActive"
				},
				{
					"name": "FromSqlTable"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "ExistingRowsInSourceAndSink"
				},
				{
					"name": "select1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          OrderID as integer,",
				"          CustomerID as integer,",
				"          SalespersonPersonID as integer,",
				"          PickedByPersonID as integer,",
				"          ContactPersonID as integer,",
				"          BackorderOrderID as integer,",
				"          OrderDate as date,",
				"          ExpectedDeliveryDate as date,",
				"          CustomerPurchaseOrderNumber as string,",
				"          IsUndersupplyBackordered as boolean,",
				"          Comments as string,",
				"          DeliveryInstructions as string,",
				"          InternalComments as string,",
				"          PickingCompletedWhen as timestamp,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT *\\nFROM Sales.Orders',",
				"     format: 'query',",
				"     wildcardPaths:['Sales.Orderlines.txt']) ~> Orders",
				"source(output(",
				"          OrderLineID as integer,",
				"          OrderID as integer,",
				"          StockItemID as integer,",
				"          Description as string,",
				"          PackageTypeID as integer,",
				"          Quantity as integer,",
				"          UnitPrice as decimal(18,2),",
				"          TaxRate as decimal(18,3),",
				"          PickedQuantity as integer,",
				"          PickingCompletedWhen as timestamp,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT *\\nFROM Sales.OrderLines',",
				"     format: 'query') ~> OrderLines",
				"source(output(",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          BillToCustomerID as integer,",
				"          CustomerCategoryID as integer,",
				"          BuyingGroupID as integer,",
				"          PrimaryContactPersonID as integer,",
				"          AlternateContactPersonID as integer,",
				"          DeliveryMethodID as integer,",
				"          DeliveryCityID as integer,",
				"          PostalCityID as integer,",
				"          CreditLimit as decimal(18,2),",
				"          AccountOpenedDate as date,",
				"          StandardDiscountPercentage as decimal(18,3),",
				"          IsStatementSent as boolean,",
				"          IsOnCreditHold as boolean,",
				"          PaymentDays as integer,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          DeliveryRun as string,",
				"          RunPosition as string,",
				"          WebsiteURL as string,",
				"          DeliveryAddressLine1 as string,",
				"          DeliveryAddressLine2 as string,",
				"          DeliveryPostalCode as string,",
				"          DeliveryLocation as binary,",
				"          PostalAddressLine1 as string,",
				"          PostalAddressLine2 as string,",
				"          PostalPostalCode as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT *\\nFROM Sales.Customers',",
				"     format: 'query') ~> Customers",
				"source(output(",
				"          InvoiceID as integer,",
				"          CustomerID as integer,",
				"          BillToCustomerID as integer,",
				"          OrderID as integer,",
				"          DeliveryMethodID as integer,",
				"          ContactPersonID as integer,",
				"          AccountsPersonID as integer,",
				"          SalespersonPersonID as integer,",
				"          PackedByPersonID as integer,",
				"          InvoiceDate as date,",
				"          CustomerPurchaseOrderNumber as string,",
				"          IsCreditNote as boolean,",
				"          CreditNoteReason as string,",
				"          Comments as string,",
				"          DeliveryInstructions as string,",
				"          InternalComments as string,",
				"          TotalDryItems as integer,",
				"          TotalChillerItems as integer,",
				"          DeliveryRun as string,",
				"          RunPosition as string,",
				"          ReturnedDeliveryData as string,",
				"          ConfirmedDeliveryTime as timestamp,",
				"          ConfirmedReceivedBy as string,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT *\\nFROM Sales.Invoices',",
				"     format: 'query') ~> Invoices",
				"source(output(",
				"          PersonID as integer,",
				"          FullName as string,",
				"          PreferredName as string,",
				"          SearchName as string,",
				"          IsPermittedToLogon as boolean,",
				"          LogonName as string,",
				"          IsExternalLogonProvider as boolean,",
				"          HashedPassword as binary,",
				"          IsSystemUser as boolean,",
				"          IsEmployee as boolean,",
				"          IsSalesperson as boolean,",
				"          UserPreferences as string,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          EmailAddress as string,",
				"          Photo as binary,",
				"          CustomFields as string,",
				"          OtherLanguages as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT *\\nFROM Application.People',",
				"     format: 'query') ~> People",
				"source(output(",
				"          PackageTypeID as integer,",
				"          PackageTypeName as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT *\\nFROM Warehouse.PackageTypes',",
				"     format: 'query') ~> PackageTypes",
				"source(output(",
				"          StockItemID as integer,",
				"          StockItemName as string,",
				"          SupplierID as integer,",
				"          ColorID as integer,",
				"          UnitPackageID as integer,",
				"          OuterPackageID as integer,",
				"          Brand as string,",
				"          Size as string,",
				"          LeadTimeDays as integer,",
				"          QuantityPerOuter as integer,",
				"          IsChillerStock as boolean,",
				"          Barcode as string,",
				"          TaxRate as decimal(18,3),",
				"          UnitPrice as decimal(18,2),",
				"          RecommendedRetailPrice as decimal(18,2),",
				"          TypicalWeightPerUnit as decimal(18,3),",
				"          MarketingComments as string,",
				"          InternalComments as string,",
				"          Photo as binary,",
				"          CustomFields as string,",
				"          Tags as string,",
				"          SearchDetails as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT *\\nFROM Warehouse.StockItems',",
				"     format: 'query') ~> StockItems",
				"source(output(",
				"          SurrogateKey as integer,",
				"          {Order Key} as integer,",
				"          {City Key} as integer,",
				"          {Customer Key} as integer,",
				"          {Stock Item Key} as integer,",
				"          {Order Date} as date,",
				"          {Picking Date} as binary,",
				"          {Sales Person Key} as integer,",
				"          {Picker Key} as integer,",
				"          Description as string,",
				"          Quantity as integer,",
				"          {Unit Price} as decimal(18,0),",
				"          {Tax Rate} as decimal(18,0),",
				"          isActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT *\\nFROM Fact.Orders',",
				"     format: 'query') ~> LoadDestinationTable",
				"Orders, OrderLines join(Orders@OrderID == OrderLines@OrderID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, Customers join(Orders@CustomerID == Customers@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, Invoices join(Orders@OrderID == Invoices@OrderID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3, People join(Orders@CustomerID == PersonID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4, PackageTypes join(OrderLines@PackageTypeID == PackageTypes@PackageTypeID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"join5, StockItems join(OrderLines@StockItemID == StockItems@StockItemID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join6",
				"join6 select(mapColumn(",
				"          {Order Key} = Orders@OrderID,",
				"          {City Key} = DeliveryCityID,",
				"          {Customer Key} = Orders@CustomerID,",
				"          {Stock Item Key} = OrderLines@StockItemID,",
				"          {Order Date} = OrderDate,",
				"          {Picking Date} = Orders@PickingCompletedWhen,",
				"          {Sales Person Key} = Orders@SalespersonPersonID,",
				"          {Picker Key} = PickedByPersonID,",
				"          Description,",
				"          Quantity,",
				"          {Unit Price} = StockItems@UnitPrice,",
				"          {Tax Rate} = StockItems@TaxRate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns",
				"SelectColumns derive(isActive = 1) ~> AddingIsActive",
				"LoadDestinationTable select(mapColumn(",
				"          SQLSurrogateKey = SurrogateKey,",
				"          {SQLOrder Key} = {Order Key},",
				"          {SQLCity Key} = {City Key},",
				"          {SQLCustomer Key} = {Customer Key},",
				"          {SQLStock Item Key} = {Stock Item Key},",
				"          {SQLOrder Date} = {Order Date},",
				"          {SQLPicking Date} = {Picking Date},",
				"          {SQLSales Person Key} = {Sales Person Key},",
				"          {SQLPicker Key} = {Picker Key},",
				"          SQLDescription = Description,",
				"          SQLQuantity = Quantity,",
				"          {SQLUnit Price} = {Unit Price},",
				"          {SQLTax Rate} = {Tax Rate},",
				"          SQLisActive = isActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FromSqlTable",
				"Orders, FromSqlTable lookup(OrderID == {SQLOrder Key},",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(!isNull({SQLOrder Key})) ~> ExistingRowsInSourceAndSink",
				"ExistingRowsInSourceAndSink select(mapColumn(",
				"          SQLSurrogateKey,",
				"          {SQLOrder Key},",
				"          {SQLCity Key},",
				"          {SQLCustomer Key},",
				"          {SQLStock Item Key},",
				"          {SQLOrder Date},",
				"          {SQLPicking Date},",
				"          {SQLSales Person Key},",
				"          {SQLPicker Key},",
				"          SQLDescription,",
				"          SQLQuantity,",
				"          {SQLUnit Price},",
				"          {SQLTax Rate},",
				"          SQLisActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn1 alterRow(updateIf(1 == 1)) ~> alterRow1",
				"select1 derive(SQLisActive = 0) ~> derivedColumn1",
				"AddingIsActive sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     mapColumn(",
				"          {Order Key},",
				"          {City Key},",
				"          {Customer Key},",
				"          {Stock Item Key},",
				"          {Order Date},",
				"          {Picking Date},",
				"          {Sales Person Key},",
				"          {Picker Key},",
				"          Description,",
				"          Quantity,",
				"          {Unit Price},",
				"          {Tax Rate}",
				"     )) ~> ToDW",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['SurrogateKey'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     mapColumn(",
				"          SurrogateKey = SQLSurrogateKey,",
				"          {Order Key} = {SQLOrder Key},",
				"          {City Key} = {SQLCity Key},",
				"          {Customer Key} = {SQLCustomer Key},",
				"          {Stock Item Key} = {SQLStock Item Key},",
				"          {Order Date} = {SQLOrder Date},",
				"          {Picking Date} = {SQLPicking Date},",
				"          {Sales Person Key} = {SQLSales Person Key},",
				"          {Picker Key} = {SQLPicker Key},",
				"          Description = SQLDescription,",
				"          Quantity = SQLQuantity,",
				"          {Unit Price} = {SQLUnit Price},",
				"          {Tax Rate} = {SQLTax Rate},",
				"          isActive = SQLisActive",
				"     )) ~> UpdateisActive"
			]
		}
	}
}